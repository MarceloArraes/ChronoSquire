// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    HourlyRate    HourlyRate[]
    WorkSchedule  WorkSchedule[]
    TimeEntry     TimeEntry[]
    Company       Company[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Company {
    id          String       @id @default(cuid())
    name        String
    address     String?
    phone       String?
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    userId      String
    user        User         @relation(fields: [userId], references: [id])
    hourlyRates HourlyRate[]
    TimeEntry   TimeEntry[]
}

model HourlyRate {
    id           Int     @id @default(autoincrement())
    userId       String
    companyId    String
    dayOfWeek    Int
    isNightShift Boolean
    rate         Decimal @db.Decimal(10, 2)

    user    User    @relation(fields: [userId], references: [id])
    Company Company @relation(fields: [companyId], references: [id])

    @@unique([userId, companyId, dayOfWeek, isNightShift], name: "user_company_day_shift_unique")
}

model WorkSchedule {
    id        Int      @id @default(autoincrement())
    userId    String
    dayOfWeek Int
    startTime DateTime @db.Time
    endTime   DateTime @db.Time

    user User @relation(fields: [userId], references: [id])

    @@unique([userId, dayOfWeek])
}

model TimeEntry {
    id        Int    @id @default(autoincrement())
    userId    String
    companyId String

    // --- Replaced Fields ---
    // date         DateTime @db.Date // Removed - Use entryDate or startDateTime
    // startTime    DateTime @db.Time // Removed - Use startDateTime
    // endTime      DateTime @db.Time // Removed - Use endDateTime

    // --- NEW Recommended Fields ---
    // Stores the exact moment the shift started (UTC)
    startDateTime DateTime // Prisma DateTime typically maps to TIMESTAMP or TIMESTAMPTZ
    // Stores the exact moment the shift ended (UTC)
    endDateTime   DateTime

    // Optional but recommended: Stores just the DATE part derived from startDateTime
    // Useful for simple date-based filtering (e.g., "all entries on YYYY-MM-DD")
    // Ensure this is populated based on the UTC date of startDateTime
    entryDate DateTime @db.Date

    breakMinutes Int      @default(0) // In minutes
    // Use Decimal for precision with hours/money
    totalTime    Decimal? @db.Decimal(5, 2) // Calculated hours
    earnings     Decimal? @db.Decimal(10, 2) // Calculated based on rate

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade) // Consider onDelete behavior
    company Company @relation(fields: [companyId], references: [id], onDelete: Cascade) // Consider onDelete behavior

    // --- UPDATED Unique Constraint ---
    // Ensures a user can't start a shift for the same company at the exact same time
    @@unique([userId, companyId, startDateTime], name: "user_company_start_unique")
    // --- UPDATED Indexes ---
    @@index([userId])
    @@index([companyId])
    @@index([startDateTime]) // Index the primary timestamp
    @@index([entryDate]) // Index the date-only field
}

// Ensure User, Company models exist elsewhere in your schema
// model User { ... }
// model Company { ... }
// model HourlyRate { ... } // Ensure this model is defined correctly as well
model Holiday {
    id   Int      @id @default(autoincrement())
    date DateTime @db.Date
    name String

    @@unique([date])
}
